}
temp<- makeCacheMatrix(matrix(c(2,2,3,2),2,2))
temp
temp$getMatrix()
temp$getInverse()
temp$setInverse(temp <- matrix(c(1,1,1,1),2,2))
temp$getInverse
temp$getInverse()
makeCacheMatrix <- function(x = matrix()) {
## Initialize empty inverse
inverse <- matrix()
## Matrix Constructor
setMatrix <- function(newMatrixParameter){
x <<- newMatrix   ## New Matrix values
inverse <<- NULL  ## Reset inverse value
}
## Stores Inverse of Matrix
setInverse <- function(inverseParameter){
inverse <<- inverseParameter
}
## Code to pull values of matrix and its inverse
getMatrix <- function() x
getInverse <- function() inverse
## Return built "Matrix" list object
return(list(  getMatrix  = getMatrix
, getInverse = getInverse
, setMatrix  = setMatrix
, setInverse = setInverse
))
}
temp<- makeCacheMatrix(matrix(c(2,2,3,2),2,2))
temp
temp$setInverse(temp <- matrix(c(1,1,1,1),2,2))
temp$getInverse()
inverse <-matrix()
inverse
inverse <- NULL
inverse
temp
temp$getInverse()
temp$setInverse(matrix(c(1,1,1,1),2,2))
temp$setInverse(c(1,2))
temp$setInverse(1)
temp
makeCacheMatrix <- function(x = matrix()) {
## Initialize empty inverse
inverse <- NULL
## Matrix Constructor
setMatrix <- function(newMatrixParameter){
x <<- newMatrix   ## New Matrix values
inverse <<- NULL  ## Reset inverse value
}
## Stores Inverse of Matrix
setInverse <- function(inverseParameter){
inverse <<- inverseParameter
}
## Code to pull values of matrix and its inverse
getMatrix <- function() x
getInverse <- function() inverse
## Return built "Matrix" list object
return(list(  getMatrix  = getMatrix
, getInverse = getInverse
, setMatrix  = setMatrix
, setInverse = setInverse
))
}
temp <- makeCacheVector(matrix(c(1,1,1,1),2,2))
temp <- makeCacheMatrix(matrix(c(1,1,1,1),2,2))
temp
temp$SetInverse(matrix(c(5,5,5,5),2,2))
temp
temp$SetInverse(matrix(c(5,5,5,5),2,2))
temp$SetInverse(matrix(c(5,5,5,5),2,2)))
temp$SetInverse(matrix(c(5,5,5,5),2,2))
temp$setInverse(matrix(c(5,5,5,5),2,2))
temp$getInverse()
source('C:/Users/hmar/COURSERA/R/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/hmar/COURSERA/R/ProgrammingAssignment2/cachematrix.R')
matrix(c(2,2,3,2),2,2)
solve(matrix(c(2,2,3,2),2,2))
makeCacheMatrix(matrix(c2,2,3,2),2,2)
makeCacheMatrix(matrix(c(2,2,3,2),2,2)
makeCacheMatrix(matrix(c(2,2,3,2),2,2)
makeCacheMatrix(matrix(c(2,2,3,2),2,2))
temp <- makeCacheMatrix(matrix(c(2,2,3,2),2,2))
temp
temp$getMatrix
temp$getMatrix()
cacheSolve(temp)
cacheSolve(temp)
temp <- makeCacheMatrix(matrix(c(2,2,3,2),2,2))
source('C:/Users/hmar/COURSERA/R/ProgrammingAssignment2/cachematrix.R')
temp <- makeCacheMatrix(matrix(c(2,2,3,2),2,2))
cacheSolve(temp)
cacheSolve(temp)
temp$getMatrix()
source('C:/Users/hmar/COURSERA/R/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/hmar/COURSERA/R/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix
temp <- makeCacheMatrix(matrix(c(2,2,3,2),2,2))
temp
temp$getMatrix
temp$getMatrix()
temp$getInverse()
class(temp)
makeCacheMatrix
makeCacheMatrix()
makeCacheMatrix
makeCacheMatrix()
temp <- makeCacheMatrix()
temp
temp$getMatrix
temp$getMatrix()
matrix(c(2,2,3,2),2,2)
matrix(c(2,2,3,2),3,2)
matrix(c(2,2,3,2,2,2),3,2)
makeCacheMatrix <- function(x = matrix()) {
## Initialize empty inverse
inverse <- NULL
## Matrix Constructor
setMatrix <- function(newMatrixParameter){
x <<- newMatrix   ## New Matrix values
inverse <<- NULL  ## Reset inverse value
}
## Stores Inverse of Matrix
setInverse <- function(inverseParameter){
inverse <<- inverseParameter
}
## Code to pull values of matrix and its inverse
getMatrix <- function() x
getInverse <- function() inverse
## Return built "Matrix" list object
return(list(  1  = getMatrix
, 2 = getInverse
, 3  = setMatrix
, 4 = setInverse
)
)
}
makeCacheMatrix <- function(x = matrix()) {
## Initialize empty inverse
inverse <- NULL
## Matrix Constructor
setMatrix <- function(newMatrixParameter){
x <<- newMatrix   ## New Matrix values
inverse <<- NULL  ## Reset inverse value
}
## Stores Inverse of Matrix
setInverse <- function(inverseParameter){
inverse <<- inverseParameter
}
## Code to pull values of matrix and its inverse
getMatrix <- function() x
getInverse <- function() inverse
## Return built "Matrix" list object
return(list(  n1  = getMatrix
, n2 = getInverse
, n3  = setMatrix
, n4 = setInverse
)
)
}
temp <- makeCacheMatrix(matrix(c(2,2,3,2),2,2))
temp
temp$n1
temp$n1()
test <- function(){
henry <-function() print('hello')
is <- function() print('world')
the <- function() print('test')
list(col1 = henry, col2= is, col3= the)
}
set.seed(1)
rpois(5, 2)
?rpois
?ppois
?dpois
qpois
?qpois
library(httr)
?httr
myapp = oauth_app("githubAPIQuiz","f9f208aefb2a95230c36","3b15136600000829122a2baa7ff17e04c9bfa8f8")
sig = sign_auth1.0(myapp,token = "https://api.github.com/users/jtleek/repos",token_secret = "https://api.github.com/users/jtleek/repos")
homeTL = GET("https://github.com/settings/applications",sig)
myapp = oauth_app("githubAPIQuiz","f9f208aefb2a95230c36","3b15136600000829122a2baa7ff17e04c9bfa8f8")
sig = sign_oauth1.0(myapp,token = "https://api.github.com/users/jtleek/repos",token_secret = "https://api.github.com/users/jtleek/repos")
homeTL = GET("https://github.com/settings/applications",sig)
homeTL
oauth_endpoints("githubAPIQuiz")
myapp <- oauth_app("githubAPIQuiz","IDf9f208aefb2a95230c36","Secret3b15136600000829122a2baa7ff17e04c9bfa8f8")
github_token <- oauth2.0_token(oauth_endpoints("githubAPIQuiz"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("githubAPIQuiz","IDf9f208aefb2a95230c36","Secret3b15136600000829122a2baa7ff17e04c9bfa8f8")
github_token <- oauth2.0_token(oauth_endpoints("githubAPIQuiz"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("githubAPIQuiz","IDf9f208aefb2a95230c36","Secret3b15136600000829122a2baa7ff17e04c9bfa8f8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github",key="f9f208aefb2a95230c36",secret="3b15136600000829122a2baa7ff17e04c9bfa8f8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github",key="f9f208aefb2a95230c36",secret="3b15136600000829122a2baa7ff17e04c9bfa8f8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
oauth_endpoints("github")
myapp <- oauth_app("github",key="f9f208aefb2a95230c36",secret="3b15136600000829122a2baa7ff17e04c9bfa8f8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
gtoken <- config(token = github_token)
gtoken <- config(token = github_token)
oauth_endpoints("github")
myapp <- oauth_app("github",key="f9f208aefb2a95230c36",secret="3b15136600000829122a2baa7ff17e04c9bfa8f8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
q()
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github",key="f9f208aefb2a95230c36",secret="3b15136600000829122a2baa7ff17e04c9bfa8f8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
oauth_endpoints("github")
myapp <- oauth_app("github",key="f9f208aefb2a95230c36",secret="3b15136600000829122a2baa7ff17e04c9bfa8f8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
q()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
read.csv(path2csv, stringAsFactors)
read.csv(path2csv, stringAsFactors = FALSE)
read.csv(file=path2csv, stringAsFactors = FALSE)
?read.csv
read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
pakageVersion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?Select
?select
select(cran,op_id, pakcage, country)
select(cran,ip_id, pakcage, country)
select(cran,ip_id, package, country)
5:20
select(cran, rarch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
select(cran)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran,r_version =="3.1.1", country == "US")
?Comparison
filter(cran,r_version <="3.0.2", country == "India")
filter(cran,r_version <="3.0.2", country == "IN")
filter(cran, country == "US"| country == "IN")
filter(cran, size > 100500)
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
1is.na(c(3,5,NA,10))
!1is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
select(cran, size:ip_id)
cran2 <-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package, mean(size))
?n
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts<-filter(pack_sum, count > 679)
top_counts
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique<-filter(pack_sum,unique > 465)
top_unique
arrange(top_unique,desc(count))
arrange(top_unique,desc(unique))
submit()
submit()
submit()
submit()
cran %>%
select(ip_id,country,package,size) %>%
print
submit()
rest()
reset()
submit()
submit()
submit()
submit()
cran
submit()
submit()
submit()
submit()
submit()
submit()
submnit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex","class"))
submit()
students3
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
?gather
submit()
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
submit()
submit()
?mutate
?mutate()
submit()
submit()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = extract_numeric(class))
print
submit()
reset()
submit()
?extract_numeric
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
### Call to mutate() goes here %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed<-mutate(passed,status = "passed")
failed<- mutate(failed, status = "failed")
?rbind_list
rbind_list(passed,failed,name)
rbind_list(passed,failed)
sat
submit()
submit()
submit()
submit()
sys.getlocate("LC_TIME")
sys.getlocale("LC_TIME")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment
)
ydm("1989-05-17")
ymd("1989-05-17")
my_date <-ymd("1989-05-17")
my_date
class(my_date
)
ymd("1989 may 17")
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
mdy(March 12, 1975)
mdy(25081985)
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
now()
nyc<- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <-mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
data <- read.table( text = 'ID   Reason_for_Dissatisfaction
1    "invalid plates the service"
2    "poor no plates on car"
3    "invalid plates"
4    "i have invalid plates on car"
' , h = TRUE , stringsAsFactors = FALSE )
wlist <- sapply( data[,-1] , strsplit , split = "\\W+", perl=TRUE)
phases <- sapply( wlist , function(x) paste( head(x,-1) , tail(x,-1) , sep = " ") )
table(unlist(phases) )
data <- read.table( text = 'ID   Reason_for_Dissatisfaction
1    " r flat good spare r the rear pass side tire is flat ams at veh coa5 needs a tow and flat changed veh has horse trailer will dismount and keep at side of hwy to change flat and rehook up later calling police to help assist and keep trailer watched 1 to go "
2    " r flat good spare r the rear pass side tire is flat ams veh coa 5 contact for mbr is sharon bowen abc extra call due to awkward situation mbr has no money and giving the driver the run a round trying to give a friends cc over the phone giving call to driver to get member off the highway"
3    " r vehicle is 4wd ams at cambridge truck and trailer coa10 veh won t start 0 to go with driver pabc as mbr was told last call wouldn t count due to excessive wait time call t3232d on jun 27 2014 kgr checking eta web 16 rems 6 chargeable "
4    " ams at veh coa5 pabc jlau for plus service 2 to go ea1 eta check drv front bumpeer damage  "
' , h = TRUE , stringsAsFactors = FALSE )
wlist <- sapply( data[,-1] , strsplit , split = "\\W+", perl=TRUE)
phases <- sapply( wlist , function(x) paste( head(x,-1) , tail(x,-1) , sep = " ") )
table(unlist(phases) )
setwd("C:/Users/hmar/COURSERA/ReproducibleResearch/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"))
ds = read.csv("http://www.math.smith.edu/r/data/help.csv")
names(ds)
attach(ds)
mean(cesd)
StepsTaken = aggregate(steps~date, sum, data=activitydata)
activitydata <- read.csv(unz("activity.zip", "activity.csv"))
StepsTaken = aggregate(steps~date, sum, data=activitydata)
